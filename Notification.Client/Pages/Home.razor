@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using System.Text;
@using System.Text.Json.Serialization;

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<p>Welcome to your new app.</p>

<h3>Messages from the server</h3>
<ul>
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code
{
    private HubConnection? _hubConnection;
    private readonly List<string> _messages = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await GetJwtTokenAsync("testuser", "password");

            if (token is not null)
            {
                _hubConnection = new HubConnectionBuilder()
                    .WithUrl("https://localhost:7134/notifications", options =>
                    {
                        options.AccessTokenProvider = () => Task.FromResult(token)!;
                    })
                    .Build();

                _hubConnection.On<string>("ReceiveNotification", message =>
                {
                    _messages.Add(message);
                    InvokeAsync(StateHasChanged);
                });

                await _hubConnection.StartAsync();
            }
            else
            {
                Console.WriteLine("Failed to retrieve JWT token.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing SignalR connection: {ex}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            try
            {
                await _hubConnection.StopAsync();
                await _hubConnection.DisposeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing SignalR connection: {ex}");
            }
        }
    }

    public async Task<string?> GetJwtTokenAsync(string username, string password)
    {
        var loginDto = new
        {
            Username = username,
            Password = password
        };

        var json = JsonSerializer.Serialize(loginDto);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        using var httpClient = new HttpClient();
        var response = await httpClient.PostAsync("https://localhost:7134/api/auth/token", content);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var jwt = JsonSerializer.Deserialize<JwtResponse>(jsonResponse);
            return jwt?.Token;
        }

        return null;
    }

    public class JwtResponse
    {
        [JsonPropertyName("token")]
        public string? Token { get; set; }
    }

}
